version: '3'

networks:
  front-end:
    driver: bridge
  back-end:
    driver: bridge

services:

  # NGINX Proxy
  #
  # An auto-scaling reverse proxy that reconfigures
  # itself based on which API services are available
  # for requests.
  #
  # See : https://github.com/jwilder/nginx-proxy
  #
  # SCALED : false
  #
  # PORTS:
  # http : 80
  #
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    environment:
      DEFAULT_HOST: api.local
    depends_on:
      - api
    networks:
      - front-end

  # HTTP API
  # Restify Node public web API service.
  #
  # Note : You don't access this directly, but through
  # the nginx-proxy load balancer. This service cannot be
  # given an explicit container_name since it needs
  # to be scalable with 'docker-compose scale api=5'
  #
  # The VIRTUAL_HOST env var is used by the nginx-proxy
  # to rebuild its reverse proxy host config and must be
  # passed in by the HTTP client:
  #
  # curl -i -H 'Host: api.local' http://127.0.0.1/
  #
  # PORTS : 8080
  #
  api:
    restart: always
    image: chainpoint/node-api-service
    build:
      context: ./node-api-service
    depends_on:
      - redis
      - rabbitmq
      - influxdb
    networks:
      - front-end
      - back-end
    environment:
      VIRTUAL_HOST: api.local

  # Splitter
  #
  # SCALED: true
  # 
  # PORTS : none
  #
  splitter:
    restart: always
    image: chainpoint/node-splitter-service
    build:
      context: ./node-splitter-service
    depends_on:
      - rabbitmq
      - influxdb
    networks:
      - back-end

  # Aggregator
  #
  # SCALED: true
  #
  # PORTS : none
  #
  aggregator:
    restart: always
    image: chainpoint/node-aggregator-service
    build:
      context: ./node-aggregator-service
    depends_on:
      - rabbitmq
      - influxdb
      - nist-beacon
    networks:
      - back-end

  # NIST Beacon
  # Retrieve and store current NIST Beacon records
  # 
  # SCALED: false
  #
  # PORTS : none
  #
  nist-beacon:
    restart: always
    image: chainpoint/node-nist-beacon-service
    container_name: nist-beacon
    build:
      context: ./node-nist-beacon-service
    depends_on:
      - redis
      - influxdb
    networks:
      - back-end

  # Calendar
  # Aggregate Merkle roots from the `aggregator` service instances
  # and write them to the Calendar event/block chains.
  #
  # SCALED: false
  #
  # PORTS : none
  #
  calendar:
    restart: always
    image: chainpoint/node-calendar-service
    container_name: calendar
    build:
      context: ./node-calendar-service
    environment:
      NACL_KEYPAIR_SEED: '+zy90opG2vQIUOL1rI6Ja3tN26QtE6AC5F5bP1j+NgM='
    depends_on:
      - roach1
      - roach2
      - roach3
      - rabbitmq
      - influxdb
    networks:
      - back-end

  # Bitcoin Fees
  # Retrieve and store recommended transaction fees for Bitcoin
  # 
  # SCALED: false
  #
  # PORTS : none
  #
  btc-fee:
    restart: always
    image: chainpoint/node-btc-fee-service
    container_name: btc-fee
    build:
      context: ./node-btc-fee-service
    depends_on:
      - consul
      - rabbitmq
      - influxdb
    networks:
      - back-end

  # Bitcoin Transmit
  # Send Calendar Block Merkle roots to be embedded in a BTC transaction.
  # 
  btc-tx:
    restart: always
    image: chainpoint/node-btc-tx-service
    container_name: btc-tx
    build:
      context: ./node-btc-tx-service
    environment:
      CHAINPOINT_STACK_ID: ${CHAINPOINT_STACK_ID}
    depends_on:
      - roach1
      - roach2
      - roach3
      - consul
      - rabbitmq
      - btc-fee
      - influxdb
    networks:
      - back-end

  # Bitcoin Transmit Monitor
  # Monitor and report on the state of BTC transactions this app has submitted.
  # 
  btc-mon:
    restart: always
    image: chainpoint/node-btc-mon-service
    container_name: btc-mon
    build:
      context: ./node-btc-mon-service
    depends_on:
      - rabbitmq
      - influxdb
    networks:
      - back-end

  # Proof State
  # Encapsulates all persistent data storage for partial proof data.
  # 
  proof-state:
    restart: always
    image: chainpoint/node-proof-state-service
    build:
      context: ./node-proof-state-service
    depends_on:
      - rabbitmq
      - postgres
      - influxdb
    networks:
      - back-end

  # Proof Generation
  # Responsible for constructing, signing, and validating Chainpoint proofs
  # for Calendar, Bitcoin, and Ethereum attestation levels.
  # 
  proof-gen:
    restart: always
    image: chainpoint/node-proof-gen-service
    build:
      context: ./node-proof-gen-service
    depends_on:
      - rabbitmq
      - influxdb
    networks:
      - back-end

  # InfluxDB Telegraf service
  #
  telegraf:
    image: telegraf:1.1.2-alpine
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    ports:
      - "8092:8092/udp"
      - "8094:8094"
      # - "8125:8125/udp"
    depends_on:
      - influxdb
    networks:
      - back-end

  # InfluxDB Chronograf service (Visualization)
  #
  chronograf:
    restart: always
    image: chronograf:1.3.0-alpine
    container_name: chronograf
    ports:
      - "8888:8888"
    volumes:
      - ./data/chronograf:/var/lib/chronograf
    environment:
        INFLUXDB_URL: http://influxdb:8086
        KAPACITOR_URL: http://kapacitor:9092
    depends_on:
      - influxdb
    networks:
      - back-end

  # InfluxDB Kapacitor service (Alerting)
  #
  kapacitor:
    image: kapacitor:1.2.1-alpine
    environment:
      KAPACITOR_HOSTNAME: kapacitor
      KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
    volumes:
      - ./data/kapacitor:/var/lib/kapacitor
    ports:
      - "9092:9092"
    depends_on:
      - influxdb
    networks:
      - back-end

  # InfluxDB
  #
  influxdb:
    restart: always
    image: influxdb:1.1.5-alpine
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - ./data/influxdb:/var/lib/influxdb
    networks:
      - back-end

  # InfluxDB CLI
  #   docker-compose run influxdb-cli
  #
  influxdb-cli:
    image: influxdb:1.1.5-alpine
    entrypoint:
      - influx
      - -host
      - influxdb
    depends_on:
      - influxdb
    networks:
      - back-end

  # InfluxDB Kapacitor CLI
  #   docker-compose run kapacitor-cli
  #
  kapacitor-cli:
    image: kapacitor:1.2.1-alpine
    entrypoint: ash
    environment:
      KAPACITOR_URL: http://kapacitor:9092
    depends_on:
      - influxdb
      - kapacitor
    networks:
      - back-end

  # Postgres
  #
  # See : https://hub.docker.com/_/postgres/
  # Note: Connect locally on OS X:
  #
  # Installs local client 'psql'
  #   brew install postgres
  #
  # Connect (uname/pass chainpoint/chainpoint):
  #   psql -h 127.0.0.1 -U chainpoint
  #
  postgres:
    restart: always
    image: postgres:9.6.2-alpine
    container_name: postgres
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: chainpoint
      POSTGRES_PASSWORD: chainpoint
    ports:
      - "5432:5432"
    networks:
      - back-end

  # RabbitMQ
  #
  # Admin Page (username:pass)
  # http://127.0.0.1:15673/ (rabbitmq:rabbitmq)
  #
  # LOCAL PORTS:
  # amqp : 5673 (+1 over default)
  # http : 15673 (+1 over default)
  #
  rabbitmq:
    restart: always
    image: "rabbitmq:3.6.9-management-alpine"
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
    - 5673:5672
    - 15673:15672
    environment:
      RABBITMQ_DEFAULT_USER: chainpoint
      RABBITMQ_DEFAULT_PASS: chainpoint
    networks:
      - back-end

  # Redis
  #
  # LOCAL PORTS:
  # redis : 6380 (+1 over default)
  #
  redis:
    restart: always
    image: chainpoint/redis
    container_name: redis
    build:
      context: ./redis
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - back-end

  # Consul
  #
  # Consul Admin UI: http://127.0.0.1:8500
  #
  consul:
    restart: always
    image: consul:0.8.3
    container_name: consul
    ports:
      - "8300:8300"
      - "8400:8400"
      - "8500:8500"
    volumes:
      - ./data/consul:/consul/data
    networks:
      - back-end

  # CockroachDB
  #
  # CockroachDB Admin UI: http://127.0.0.1:8080
  #
  roach1:
    restart: always
    image: cockroachdb/cockroach:v1.0.1
    container_name: roach1
    ports:
      - "26257:26257"
      - "8080:8080"
    volumes:
      - ./data/roach1:/cockroach/cockroach-data
    command:
      - start
      - --insecure
    networks:
      - back-end

  roach2:
    restart: always
    image: cockroachdb/cockroach:v1.0.1
    container_name: roach2
    depends_on:
      - roach1
    ports:
      - 26257
    volumes:
      - ./data/roach2:/cockroach/cockroach-data
    command:
      - start
      - --insecure
      - --join
      - roach1
    networks:
      - back-end

  roach3:
    restart: always
    image: cockroachdb/cockroach:v1.0.1
    container_name: roach3
    depends_on:
      - roach1
      - roach2
    ports:
      - 26257
    volumes:
      - ./data/roach3:/cockroach/cockroach-data
    command:
      - start
      - --insecure
      - --join
      - roach1
    networks:
      - back-end
