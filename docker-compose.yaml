version: '3'

services:

  # HTTP API
  # Restify Node public web API service.
  # 
  # LOCAL PORTS
  # http : 8080
  #
  api:
    restart: always
    image: chainpoint/node-api-service
    container_name: api
    build:
      context: ./node-api-service
    ports:
      - "8080:8080"
    depends_on:
      - rabbitmq
    networks:
      - front-end

  # Splitter
  # Consume batches of incoming hashes from 'api' and re-queue them individually.
  # 
  # PORTS
  # none
  #
  splitter:
    restart: always
    image: chainpoint/node-splitter-service
    container_name: splitter
    build:
      context: ./node-splitter-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Aggregator
  # Aggregate individual hashes into a Merkle tree
  # sending the Merkle root to the `calendar` service, and
  # partial proof data to the `proof-state` service.
  # 
  # PORTS
  # none
  #
  aggregator:
    restart: always
    image: chainpoint/node-aggregator-service
    container_name: aggregator
    build:
      context: ./node-aggregator-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Calendar
  # Aggregate Merkle roots from the `aggregator` service instances
  # and write them to the Calendar event/block chains.
  # 
  # PORTS
  # none
  #
  calendar:
    restart: always
    image: chainpoint/node-calendar-service
    container_name: calendar
    build:
      context: ./node-calendar-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Bitcoin Transmit
  # Send Calendar Block Merkle roots to be embedded in a BTC transaction.
  # 
  # PORTS
  # none
  #
  btc-tx:
    restart: always
    image: chainpoint/node-btc-tx-service
    container_name: btc-tx
    build:
      context: ./node-btc-tx-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Bitcoin Fees
  # Retrieve and store recommended transaction fees for Bitcoin
  # 
  # PORTS
  # none
  #
  btc-fee:
    restart: always
    image: chainpoint/node-btc-fee-service
    container_name: btc-fee
    build:
      context: ./node-btc-fee-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Bitcoin Transmit Monitor
  # Monitor and report on the state of BTC transactions this app has submitted.
  # 
  # PORTS
  # none
  #
  btc-mon:
    restart: always
    image: chainpoint/node-btc-mon-service
    container_name: btc-mon
    build:
      context: ./node-btc-mon-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Proof State
  # Encapsulates all persistent data storage for partial proof data.
  # 
  # PORTS
  # none
  #
  proof-state:
    restart: always
    image: chainpoint/node-proof-state-service
    container_name: proof-state
    build:
      context: ./node-proof-state-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Proof Generation
  # Responsible for constructing, signing, and validating Chainpoint proofs
  # for Calendar, Bitcoin, and Ethereum attestation levels.
  # 
  # PORTS
  # none
  #
  proof-gen:
    restart: always
    image: chainpoint/node-proof-gen-service
    container_name: proof-gen
    build:
      context: ./node-proof-gen-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # RabbitMQ
  #
  # Admin Page (username:pass)
  # http://127.0.0.1:15673/ (rabbitmq:rabbitmq)
  #
  # LOCAL PORTS:
  # amqp : 5673 (+1 over default)
  # http : 15673 (+1 over default)
  #
  rabbitmq:
    restart: always
    image: "rabbitmq:3.6.9-management-alpine"
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
    - 5673:5672
    - 15673:15672
    environment:
    - RABBITMQ_DEFAULT_USER=chainpoint
    - RABBITMQ_DEFAULT_PASS=chainpoint
    networks:
      - back-end
      - front-end

  # Redis
  #
  # LOCAL PORTS:
  # redis : 6380 (+1 over default)
  #
  redis:
    restart: always
    image: chainpoint/redis
    container_name: redis
    build:
      context: ./redis
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - back-end

  # Crate
  #
  # Admin Page
  # http://127.0.0.1:4200/#/
  #
  # LOCAL PORTS:
  # web   : 4201 (+1 over default)
  # crate : 4301 (+1 over default)
  #
  crate:
    restart: always
    image: crate:1.1.2
    container_name: crate
    ports:
      - "4201:4200"
      - "4301:4300"
    volumes:
      - ./data/crate:/data
    environment:
      CRATE_HEAP_SIZE: 4g
    command: crate -Cpath.conf=/crate/config -Ccluster.name=cluster
    networks:
      - back-end

# Networks
#
# Front end network
#   Shared by HTTP API service and RabbitMQ only.
#
# Back end network
#   Available to all services except HTTP API
#
networks:
  front-end:
    driver: bridge
  back-end:
    driver: bridge
