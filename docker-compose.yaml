version: '3'

services:

  # HTTP API
  # Restify Node public web API service.
  #
  # Note : You don't access this directly, but through
  # the nginx-proxy load balancer. This service cannot be
  # given an explicit container_name since it needs
  # to be scalable with 'docker-compose scale api=5'
  #
  # The VIRTUAL_HOST env var is used by the nginx-proxy
  # to rebuild its reverse proxy host config and must be
  # passed in by the HTTP client:
  #
  # curl -i -H 'Host: api.local' http://127.0.0.1/
  #
  # PORTS : 8080
  #
  api:
    restart: always
    image: chainpoint/node-api-service
    build:
      context: ./node-api-service
    depends_on:
      - rabbitmq
    networks:
      - front-end
    environment:
      - VIRTUAL_HOST=api.local

  # Splitter
  # Consume batches of incoming hashes from 'api' and re-queue them
  # individually.
  #
  # SCALED: true
  # 
  # PORTS : none
  #
  splitter:
    restart: always
    image: chainpoint/node-splitter-service
    build:
      context: ./node-splitter-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Aggregator
  # Aggregate individual hashes into a Merkle tree
  # sending the Merkle root to the `calendar` service, and
  # partial proof data to the `proof-state` service.
  #
  # SCALED: true
  #
  # PORTS : none
  #
  aggregator:
    restart: always
    image: chainpoint/node-aggregator-service
    build:
      context: ./node-aggregator-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # NIST Beacon
  # Retrieve and store current NIST Beacon records
  # 
  # SCALED: false
  #
  # PORTS : none
  #
  nist-beacon:
    restart: always
    image: chainpoint/node-nist-beacon-service
    container_name: nist-beacon
    build:
      context: ./node-nist-beacon-service
    depends_on:
      - redis
    networks:
      - back-end

  # Calendar
  # Aggregate Merkle roots from the `aggregator` service instances
  # and write them to the Calendar event/block chains.
  #
  # SCALED: false
  #
  # PORTS : none
  #
  calendar:
    restart: always
    image: chainpoint/node-calendar-service
    container_name: calendar
    build:
      context: ./node-calendar-service
    depends_on:
      - rabbitmq
      - nist-beacon
    networks:
      - back-end

  # Bitcoin Transmit
  # Send Calendar Block Merkle roots to be embedded in a BTC transaction.
  # 
  # SCALED: false
  #
  # PORTS : none
  #
  btc-tx:
    restart: always
    image: chainpoint/node-btc-tx-service
    container_name: btc-tx
    build:
      context: ./node-btc-tx-service
    depends_on:
      - rabbitmq
      - btc-fee
    networks:
      - back-end

  # Bitcoin Fees
  # Retrieve and store recommended transaction fees for Bitcoin
  # 
  # SCALED: false
  #
  # PORTS : none
  #
  btc-fee:
    restart: always
    image: chainpoint/node-btc-fee-service
    container_name: btc-fee
    build:
      context: ./node-btc-fee-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Bitcoin Transmit Monitor
  # Monitor and report on the state of BTC transactions this app has submitted.
  # 
  # SCALED: false
  #
  # PORTS : none
  #
  btc-mon:
    restart: always
    image: chainpoint/node-btc-mon-service
    container_name: btc-mon
    build:
      context: ./node-btc-mon-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # Proof State
  # Encapsulates all persistent data storage for partial proof data.
  # 
  # SCALED: true
  #
  # PORTS : none
  #
  proof-state:
    restart: always
    image: chainpoint/node-proof-state-service
    build:
      context: ./node-proof-state-service
    depends_on:
      - rabbitmq
      - crate
    networks:
      - back-end

  # Proof Generation
  # Responsible for constructing, signing, and validating Chainpoint proofs
  # for Calendar, Bitcoin, and Ethereum attestation levels.
  # 
  # SCALED : true
  #
  # PORTS : none
  #
  proof-gen:
    restart: always
    image: chainpoint/node-proof-gen-service
    build:
      context: ./node-proof-gen-service
    depends_on:
      - rabbitmq
    networks:
      - back-end

  # RabbitMQ
  #
  # Admin Page (username:pass)
  # http://127.0.0.1:15673/ (rabbitmq:rabbitmq)
  #
  # LOCAL PORTS:
  # amqp : 5673 (+1 over default)
  # http : 15673 (+1 over default)
  #
  rabbitmq:
    restart: always
    image: "rabbitmq:3.6.9-management-alpine"
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
    - 5673:5672
    - 15673:15672
    environment:
    - RABBITMQ_DEFAULT_USER=chainpoint
    - RABBITMQ_DEFAULT_PASS=chainpoint
    networks:
      - back-end
      - front-end

  # NGINX Proxy
  #
  # An auto-scaling reverse proxy that reconfigures
  # itself based on which API services are available
  # for requests.
  #
  # See : https://github.com/jwilder/nginx-proxy
  #
  # SCALED : false
  #
  # PORTS:
  # http : 80
  #
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    environment:
      - DEFAULT_HOST=api.local
    depends_on:
      - api
    networks:
      - front-end

  # Redis
  #
  # LOCAL PORTS:
  # redis : 6380 (+1 over default)
  #
  redis:
    restart: always
    image: chainpoint/redis
    container_name: redis
    build:
      context: ./redis
    ports:
      - "6380:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - back-end
      - front-end

  # Crate
  #
  # Admin Page
  # http://127.0.0.1:4201/#/
  #
  # LOCAL PORTS:
  # web   : 4201 (+1 over default)
  # crate : 4301 (+1 over default)
  #
  crate:
    restart: always
    image: crate:1.1.2
    container_name: crate
    ports:
      - "4201:4200"
      - "4301:4300"
    volumes:
      - ./data/crate:/data
    environment:
      CRATE_HEAP_SIZE: 4g
    command: crate -Cpath.conf=/crate/config -Ccluster.name=cluster
    networks:
      - back-end

# Networks
#
# Front end network
#   Shared by NGNINX Proxy, HTTP API, and RabbitMQ only.
#
# Back end network
#   Available to all services except NGINX Proxy and HTTP API
#
networks:
  front-end:
    driver: bridge
  back-end:
    driver: bridge
